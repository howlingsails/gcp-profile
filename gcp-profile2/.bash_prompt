#!/bin/bash
# Detect whether the current directory is a git repository.
function is_git_repository {
    git branch > /dev/null 2>&1
}

# Detect whether the current directory is a Mercurial repository.
function is_mercurial_repository {
    branch=$(hg branch 2>/dev/null)
    if [ -n "${branch}" ]; then
        return 0
    else
        return 1
    fi
}

# Detect whether the current directory is a Subversion repository.
function is_subversion_repository {
    test -d .svn
}

# Determine the branch/state information for this git repository.
function set_git_branch {
    # Capture the output of the "git status" command.
    git_status="$(git status 2> /dev/null)"
    
    # Set color based on clean/staged/dirty.
    if [[ ${git_status} =~ "working tree clean" ]]; then
        state="${GREEN}"
        elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${YELLOW}"
    else
        state="${LIGHT_RED}"
    fi
    
    # Set arrow icon based on status against remote.
    remote_pattern="# Your branch is (.*) of"
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            remote="^"
        else
            remote="\/"
        fi
    else
        remote=""
    fi
    diverge_pattern="# Your branch and (.*) have diverged"
    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote="~"
    fi
    
    # Get the name of the branch.
    gitsym=$(git symbolic-ref HEAD 2>/dev/null)
    if [[ $? == 0 ]]; then
        branch="${gitsym##refs/heads/}"
    fi
    
    # Set the final branch string.
    BRANCH="${state} (${branch})${remote}${COLOR_NONE} "
}

# Determine the branch/state information for this Mercurial repository.
function set_mercurial_branch {
    # Get the name of the branch.
    branch=$(hg branch 2>/dev/null)
    branchstatus=`hg status | awk '{ print $1 }' | uniq -c | xargs`
    if [[ -z ${branchstatus} ]]; then
        branchstatus='clean'
    fi
    #remote=`hg summary --remote | grep remote | sed "s/.*: //g" | sed "s/(synced)//g"`
    remote="NRC" #No Check TODO: make a cached on later check, delay 30 secondon first entry but then cached for 1 minute? Remote NRC for when not checked
    #outgoing=`hg outgoing | grep changeset | wc -l | tr -d ' '`
    outgoing="NOC" #See Above TODO Cache 1 minute. NOC for not checked
    outgoingmarkup="⇒ ${outgoing}"
    
    if [[ ${outgoing} =~ "0" ]]; then
        outgoingmarkup='✔︎'
    fi
    branchmessage="${branch}${BGreen} [${branchstatus}] ${BBlue}${outgoingmarkup}${WHITE}${remote}${BRN}"
    BRANCH="${branchmessage}"
}

# Determine the branch informatioin for this Subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function set_subversion_branch {
    # Capture the output of the "svn info" command
    svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"
    
    # Get the name of the branch.
    branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
    trunk_pattern="^URL: .*/trunk(/.*)?$"
    if [[ ${svn_info} =~ $branch_pattern ]]; then
        branch=${BASH_REMATCH[2]}
        elif [[ ${svn_info} =~ $trunk_pattern ]]; then
        branch='trunk'
    fi
    
    # Set the final branch string.
    BRANCH="(${branch}) "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="${BLUE}\$${COLOR_NONE}"
    else
        PROMPT_SYMBOL="${LIGHT_RED}\$${COLOR_NONE}"
    fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
    if test -z "$VIRTUAL_ENV" ; then
        PYTHON_VIRTUALENV=""
    else
        PYTHON_VIRTUALENV="${CYAN}[ `basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
    fi
}

function set_nodevirtenv () {
    if test -z "$NODE_VIRTUAL_ENV" ; then
        NODE_VIRTUALENV=""
    else
        NODE_VIRTUALENV="${PURPLE}[ `basename \"$NODE_VIRTUAL_ENV\"`]${COLOR_NONE} "
    fi
}

utc_date() {
    UTCTIME=$(date -u)
}

# Set the full bash prompt.
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?
    
    # Set the PYTHON_VIRTUALENV variable.
    set_virtualenv
    
    # Set the NODE_PYTHON_VIRTUALENV variable.
    set_nodevirtenv
    
    # Set the BRANCH variable.
    if is_git_repository ; then
        set_git_branch
        elif is_subversion_repository ; then
        set_subversion_branch
        elif is_mercurial_repository ; then
        set_mercurial_branch
    else
        BRANCH=''
    fi
    #echo "BRANCH=${BRANCH}"
    utc_date
    #echo "UTCTIME=${UTCTIME}"
    gitUserName=$(git config --list --global | grep user.name | sed 's/.*=//g' )
    gitUserEmail=$(git config --list --global | grep user.email | sed 's/.*=//g' )
    knamespace=$(echo -e "${namespace}")

    nodeVersion=$(node -v)
    nvmVersion=$(nvm -v)
    npmVersion=$(npm -v)
    yarnVersion=$(yarn -v)
    npxVersion=$(npx -v)

    # Set the bash prompt variable.
    #PS1="${JOBS}\n${GRN}\342\226\210${BYellow}\342\226\210${BBlue} \u@${Purple}\h ${WHT} | ${Cyan}${THEIP}${WHT} | ${BYellow} \d \@ (${UTCTIME} UTC)   \n${BYellow}\342\226\210${GRN}\342\226\210${BLUE} \w${BRN}\ ${BRANCH}\[\033[00m\]\n ${BGreen}$ ${WHT}"
    #PS1="\[${JOBS}\n${BBlue}\342\226\210${BGreen}\342\226\210${BBlue} \u@${Purple}\h ${BWhite}LOCAL-MAC${WHT} | ${Cyan}${THEIP}${WHT} | ${BYellow} \d \@ (${UTCTIME} UTC)   \n${BGreen}\342\226\210${BBlue}\342\226\210${BLUE} \w${BRN}(${BRANCH})\[\033[00m\]\n\] ${BGreen}$ ${WHT}"
    PS1="${JOBS}\n${BBlue}\u@${Purple}\h ${WHT} | git:${BYellow}${gitUserName} ${WHT} | k:${BBlue}${knamespace}${WHT} |\n${Cyan}${THEIP}${WHT}\n${BYellow}▓${GRN}▓ ${ICyan} \w\ ${IWhite}${BRANCH} ${BWhite}| ${BYellow} \d \@ (${UTCTIME})\n ${BGreen}$ ${WHT} "

    export PS1
    
    #PS1="${LIGHT_GREEN}\u@\h ${PYTHON_VIRTUALENV}${NODE_VIRTUALENV}${GREEN}${BLUE}\w${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
}

PROMPT_COMMAND=set_bash_prompt
